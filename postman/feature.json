{
	"info": {
		"_postman_id": "31d2187e-b820-4e6e-ab92-d7489aefdf20",
		"name": "feature",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Users",
			"item": [
				{
					"name": "Add user1",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"rndUserName\", '{{$randomFullName}}')\r",
									"pm.collectionVariables.set(\"rndUserEmail\", '{{$randomEmail}}')\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const source = JSON.parse(pm.request.body.raw);\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Пользователь должен содержать поля: id, name, email\", function () {\r",
									"pm.expect(target).to.have.property('id');\r",
									"pm.expect(target).to.have.property('name');\r",
									"pm.expect(target).to.have.property('email');\r",
									"});\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    pm.expect(target.id).to.not.be.null;\r",
									"    pm.expect(source.name).equal(target.name, 'Имя пользователя должно соответствовать отправленному в запросе');\r",
									"    pm.expect(source.email).equal(target.email, 'Почта пользователя должна соответствовать отправленной в запросе');\r",
									"});\r",
									"\r",
									"\r",
									"userIds = pm.collectionVariables.get(\"userIds\")\r",
									"\r",
									"if(!userIds) {\r",
									"    userIds = []\r",
									"} else {\r",
									"    if (!Array.isArray(userIds)) {\r",
									"        userIds = userIds.split(',').map(function(userIds){return Number(userIds);});\r",
									"    }\r",
									"\r",
									"}\r",
									"\r",
									"if (target.id) {\r",
									"    userIds.push(target.id)\r",
									"}\r",
									"pm.collectionVariables.set(\"userIds\", userIds)\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\":\"{{rndUserName}}\",\r\n    \"email\":\"{{rndUserEmail}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{serverUrl}}/admin/users",
							"host": [
								"{{serverUrl}}"
							],
							"path": [
								"admin",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add user2",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"rndUserName\", '{{$randomFullName}}')\r",
									"pm.collectionVariables.set(\"rndUserEmail\", '{{$randomEmail}}')\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const source = JSON.parse(pm.request.body.raw);\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Пользователь должен содержать поля: id, name, email\", function () {\r",
									"pm.expect(target).to.have.property('id');\r",
									"pm.expect(target).to.have.property('name');\r",
									"pm.expect(target).to.have.property('email');\r",
									"});\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    pm.expect(target.id).to.not.be.null;\r",
									"    pm.expect(source.name).equal(target.name, 'Имя пользователя должно соответствовать отправленному в запросе');\r",
									"    pm.expect(source.email).equal(target.email, 'Почта пользователя должна соответствовать отправленной в запросе');\r",
									"});\r",
									"\r",
									"\r",
									"userIds = pm.collectionVariables.get(\"userIds\")\r",
									"\r",
									"if(!userIds) {\r",
									"    userIds = []\r",
									"} else {\r",
									"    if (!Array.isArray(userIds)) {\r",
									"        userIds = userIds.split(',').map(function(userIds){return Number(userIds);});\r",
									"    }\r",
									"\r",
									"}\r",
									"\r",
									"if (target.id) {\r",
									"    userIds.push(target.id)\r",
									"}\r",
									"pm.collectionVariables.set(\"userIds\", userIds)\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\":\"{{rndUserName}}\",\r\n    \"email\":\"{{rndUserEmail}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{serverUrl}}/admin/users",
							"host": [
								"{{serverUrl}}"
							],
							"path": [
								"admin",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get users by ids",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.be.ok;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Пользователи должны содержать поля: id, name, email\", function () {\r",
									"    pm.expect(target[0]).to.have.property('id');\r",
									"    pm.expect(target[0]).to.have.property('name');\r",
									"    pm.expect(target[0]).to.have.property('email');\r",
									"});\r",
									"\r",
									"var userIds = pm.collectionVariables.get(\"userIds\")\r",
									"pm.test(\"Должен быть найден только один пользователь по заданному фильтру\", function () {\r",
									"    pm.expect(target.length).to.eql(userIds.length);\r",
									"});\r",
									"\r",
									"var firstId = userIds[0]\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    pm.expect(target[0].id).equal(firstId);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "default"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "{{serverUrl}}/admin/users?ids={{userIds}}",
							"host": [
								"{{serverUrl}}"
							],
							"path": [
								"admin",
								"users"
							],
							"query": [
								{
									"key": "ids",
									"value": "{{userIds}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Categories",
			"item": [
				{
					"name": "Add category1",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var name = pm.variables.replaceIn('{{$randomWord}}') + Math.floor(Math.random() * 100).toString()\r",
									"pm.collectionVariables.set(\"rndCategoryName\", name)\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const source = JSON.parse(pm.request.body.raw);\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Категория должна содержать поля: id, name\", function () {\r",
									"pm.expect(target).to.have.property('id');\r",
									"pm.expect(target).to.have.property('name');\r",
									"});\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    pm.expect(target.id).to.not.be.null;\r",
									"    pm.expect(source.name).equal(target.name, 'Название категории должно совпадать с отправленным');\r",
									"});\r",
									"\r",
									"catIds = pm.collectionVariables.get(\"catIds\")\r",
									"console.log(catIds)\r",
									"\r",
									"if(!catIds) {\r",
									"    catIds = []\r",
									"} else {\r",
									"   if (!Array.isArray(catIds)) {\r",
									"        catIds = catIds.split(',').map(function(catIds){return Number(catIds);});\r",
									"    } \r",
									"}\r",
									"console.log(catIds)\r",
									"\r",
									"if (target.id) {\r",
									"    catIds.push(target.id)\r",
									"}\r",
									"pm.collectionVariables.set(\"catIds\", catIds)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\":\"{{rndCategoryName}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{serverUrl}}/admin/categories",
							"host": [
								"{{serverUrl}}"
							],
							"path": [
								"admin",
								"categories"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Events",
			"item": [
				{
					"name": "Add event1",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rnd = new RandomUtils();\r",
									"var futDate = rnd.getFutureDateTime()\r",
									"pm.collectionVariables.set(\"rndFutureDateTime\", futDate)\r",
									"\r",
									"\r",
									"userIds = pm.collectionVariables.get(\"userIds\")\r",
									"if (!Array.isArray(userIds)) {\r",
									"userIds = userIds.split(',').map(function(userIds){return Number(userIds);});\r",
									"}\r",
									"rndUserId = userIds[Math.floor(Math.random()*userIds.length)];\r",
									"pm.collectionVariables.set(\"rndUserId\", rndUserId)\r",
									"\r",
									"catIds = pm.collectionVariables.get(\"catIds\")\r",
									"if (!Array.isArray(catIds)) {\r",
									"catIds = catIds.split(',').map(function(catIds){return Number(catIds);});\r",
									"}\r",
									"var rndCatId = catIds[Math.floor(Math.random()*catIds.length)];\r",
									"pm.collectionVariables.set(\"rndCatId\", rndCatId)\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(201);  \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const source = JSON.parse(pm.request.body.raw);\r",
									"\r",
									"console.log(source)\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Событие должно содержать поля: id, title, annotation, category, paid, eventDate, initiator, description, participantLimit, state, createdOn, location, requestModeration\", function () {\r",
									"pm.expect(target).to.have.property('id');\r",
									"pm.expect(target).to.have.property('title');\r",
									"pm.expect(target).to.have.property('annotation');\r",
									"pm.expect(target).to.have.property('category');\r",
									"pm.expect(target).to.have.property('paid');\r",
									"pm.expect(target).to.have.property('eventDate');\r",
									"pm.expect(target).to.have.property('initiator');\r",
									"pm.expect(target).to.have.property('description');\r",
									"pm.expect(target).to.have.property('participantLimit');\r",
									"pm.expect(target).to.have.property('state');\r",
									"pm.expect(target).to.have.property('createdOn');\r",
									"pm.expect(target).to.have.property('location');\r",
									"pm.expect(target).to.have.property('requestModeration');\r",
									"});\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    pm.expect(target.id).to.not.be.null;\r",
									"    pm.expect(target.title).equal(source.title, 'Название события должно соответствовать названию события в запросе');\r",
									"    pm.expect(target.annotation).equal(source.annotation, 'Аннотация события должна соответствовать аннотации события в запросе');\r",
									"    pm.expect(target.paid.toString()).equal(source.paid.toString(), 'Стоимость события должна соответствовать стоимости события в запросе');\r",
									"    pm.expect(target.eventDate).equal(source.eventDate, 'Дата проведения события должна соответствовать дате проведения события в запросе');\r",
									"    pm.expect(target.description).equal(source.description, 'Описание события должно соответствовать описание события в запросе');\r",
									"    pm.expect(target.participantLimit.toString()).equal(source.participantLimit.toString(), 'Лимит участников события должно соответствовать лимиту участников события в запросе');\r",
									"    pm.expect(target.location.lat.toString()).equal(source.location.lat.toString(), 'Широта локации проведения события должна соответствовать широте локации проведения события в запросе');\r",
									"    pm.expect(target.location.lon.toString()).equal(source.location.lon.toString(), 'Долгота локации проведения события должна соответствовать долготе локации проведения события в запросе');\r",
									"    pm.expect(target.requestModeration.toString()).equal(source.requestModeration.toString(), 'Необходимость модерации события должна соответствовать необходимости модерации события в запросе');\r",
									"});\r",
									"\r",
									"eventIds = pm.collectionVariables.get(\"eventIds\")\r",
									"\r",
									"if(!eventIds) {\r",
									"    eventIds = []\r",
									"} else {\r",
									"    if (!Array.isArray(eventIds)) {\r",
									"        eventIds = eventIds.split(',').map(function(eventIds){return Number(eventIds);});\r",
									"    }\r",
									"}\r",
									"\r",
									"if (target.id) {\r",
									"    eventIds.push(target.id)\r",
									"}\r",
									"pm.collectionVariables.set(\"eventIds\", eventIds)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"annotation\": \"{{$randomLoremParagraph}}\",\r\n    \"category\": {{rndCatId}},\r\n    \"description\": \"{{$randomLoremParagraph}}\",\r\n    \"eventDate\": \"{{rndFutureDateTime}}\",\r\n    \"location\": {\r\n        \"lat\": {{$randomLatitude}},\r\n        \"lon\": {{$randomLongitude}}\r\n        },\r\n    \"paid\": \"{{$randomBoolean}}\",\r\n    \"participantLimit\": \"{{$randomInt}}\",\r\n    \"requestModeration\": \"{{$randomBoolean}}\",\r\n    \"title\": \"{{$randomLoremSentence}}\"\r\n}      ",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{serverUrl}}/users/:userId/events",
							"host": [
								"{{serverUrl}}"
							],
							"path": [
								"users",
								":userId",
								"events"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{rndUserId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get events",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.be.ok;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json()[0];\r",
									"\r",
									"pm.test(\"Событие должно содержать поля: id, title, annotation, category, paid, eventDate, initiator, views, confirmedRequests, description, participantLimit, state, createdOn, publishedOn, location, requestModeration\", function () {\r",
									"pm.expect(target).to.have.property('id');\r",
									"pm.expect(target).to.have.property('title');\r",
									"pm.expect(target).to.have.property('annotation');\r",
									"pm.expect(target).to.have.property('category');\r",
									"pm.expect(target).to.have.property('paid');\r",
									"pm.expect(target).to.have.property('eventDate');\r",
									"pm.expect(target).to.have.property('initiator');\r",
									"pm.expect(target).to.have.property('views');\r",
									"pm.expect(target).to.have.property('confirmedRequests');\r",
									"pm.expect(target).to.have.property('description');\r",
									"pm.expect(target).to.have.property('participantLimit');\r",
									"pm.expect(target).to.have.property('state');\r",
									"pm.expect(target).to.have.property('createdOn');\r",
									"pm.expect(target).to.have.property('publishedOn');\r",
									"pm.expect(target).to.have.property('location');\r",
									"pm.expect(target).to.have.property('requestModeration');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{serverUrl}}/admin/events?users={{userIds}}&states=PENDING&categories={{catIds}}&rangeStart=2022-01-06%2013%3A30%3A38&rangeEnd=2097-09-06%2013%3A30%3A38&from=0&size=1000",
							"host": [
								"{{serverUrl}}"
							],
							"path": [
								"admin",
								"events"
							],
							"query": [
								{
									"key": "users",
									"value": "{{userIds}}",
									"description": "список id пользователей, чьи события нужно найти"
								},
								{
									"key": "states",
									"value": "PENDING",
									"description": "список состояний в которых находятся искомые события"
								},
								{
									"key": "categories",
									"value": "{{catIds}}",
									"description": "список id категорий в которых будет вестись поиск"
								},
								{
									"key": "rangeStart",
									"value": "2022-01-06%2013%3A30%3A38",
									"description": "дата и время не раньше которых должно произойти событие"
								},
								{
									"key": "rangeEnd",
									"value": "2097-09-06%2013%3A30%3A38",
									"description": "дата и время не позже которых должно произойти событие"
								},
								{
									"key": "from",
									"value": "0",
									"description": "количество событий, которые нужно пропустить для формирования текущего набора"
								},
								{
									"key": "size",
									"value": "1000",
									"description": "количество событий в наборе"
								}
							]
						},
						"description": "Эндпоинт возвращает полную информацию обо всех событиях подходящих под переданные условия"
					},
					"response": []
				}
			]
		},
		{
			"name": "Comments",
			"item": [
				{
					"name": "Add comment1 by user1",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"userIds = pm.collectionVariables.get(\"userIds\")\r",
									"var rndUserId = userIds[0];\r",
									"pm.collectionVariables.set(\"rndUserId\", rndUserId)\r",
									"\r",
									"eventIds = pm.collectionVariables.get(\"eventIds\")\r",
									"var rndEventId = eventIds[0];\r",
									"pm.collectionVariables.set(\"rndEventId\", rndEventId)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(201);  \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const source = JSON.parse(pm.request.body.raw);\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Комментарий должнен содержать поля: id, text, author, event, createdOn, editedOn\", function () {\r",
									"pm.expect(target).to.have.property('id');\r",
									"pm.expect(target).to.have.property('text');\r",
									"pm.expect(target).to.have.property('author');\r",
									"pm.expect(target).to.have.property('event');\r",
									"pm.expect(target).to.have.property('createdOn');\r",
									"pm.expect(target).to.have.property('editedOn');\r",
									"});\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    pm.expect(target.id).to.not.be.null;\r",
									"    pm.expect(target.text).equal(source.text, 'Текст комментария должнен соответствовать тексту в запросе');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"text\": \"{{$randomLoremParagraph}} comment here\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{serverUrl}}/users/:userId/events/:eventId/comment",
							"host": [
								"{{serverUrl}}"
							],
							"path": [
								"users",
								":userId",
								"events",
								":eventId",
								"comment"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{rndUserId}}"
								},
								{
									"key": "eventId",
									"value": "{{rndEventId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Add comment2 by user1",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"userIds = pm.collectionVariables.get(\"userIds\")\r",
									"// var rndUserId = userIds[Math.floor(Math.random()*userIds.length)];\r",
									"var rndUserId = userIds[0];\r",
									"pm.collectionVariables.set(\"rndUserId\", rndUserId)\r",
									"\r",
									"eventIds = pm.collectionVariables.get(\"eventIds\")\r",
									"// var rndEventId = eventIds[Math.floor(Math.random()*eventIds.length)];\r",
									"var rndEventId = eventIds[0];\r",
									"pm.collectionVariables.set(\"rndEventId\", rndEventId)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(201);  \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const source = JSON.parse(pm.request.body.raw);\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Комментарий должнен содержать поля: id, text, author, event, createdOn, editedOn\", function () {\r",
									"pm.expect(target).to.have.property('id');\r",
									"pm.expect(target).to.have.property('text');\r",
									"pm.expect(target).to.have.property('author');\r",
									"pm.expect(target).to.have.property('event');\r",
									"pm.expect(target).to.have.property('createdOn');\r",
									"pm.expect(target).to.have.property('editedOn');\r",
									"});\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    pm.expect(target.id).to.not.be.null;\r",
									"    pm.expect(target.text).equal(source.text, 'Текст комментария должнен соответствовать тексту в запросе');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"text\": \"secrete word{{$randomLoremParagraph}} comment there\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{serverUrl}}/users/:userId/events/:eventId/comment",
							"host": [
								"{{serverUrl}}"
							],
							"path": [
								"users",
								":userId",
								"events",
								":eventId",
								"comment"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{rndUserId}}"
								},
								{
									"key": "eventId",
									"value": "{{rndEventId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Add comment3 by user1",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"userIds = pm.collectionVariables.get(\"userIds\")\r",
									"// var rndUserId = userIds[Math.floor(Math.random()*userIds.length)];\r",
									"var rndUserId = userIds[0];\r",
									"pm.collectionVariables.set(\"rndUserId\", rndUserId)\r",
									"\r",
									"eventIds = pm.collectionVariables.get(\"eventIds\")\r",
									"// var rndEventId = eventIds[Math.floor(Math.random()*eventIds.length)];\r",
									"var rndEventId = eventIds[0];\r",
									"pm.collectionVariables.set(\"rndEventId\", rndEventId)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(201);  \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const source = JSON.parse(pm.request.body.raw);\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Комментарий должнен содержать поля: id, text, author, event, createdOn, editedOn\", function () {\r",
									"pm.expect(target).to.have.property('id');\r",
									"pm.expect(target).to.have.property('text');\r",
									"pm.expect(target).to.have.property('author');\r",
									"pm.expect(target).to.have.property('event');\r",
									"pm.expect(target).to.have.property('createdOn');\r",
									"pm.expect(target).to.have.property('editedOn');\r",
									"});\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    pm.expect(target.id).to.not.be.null;\r",
									"    pm.expect(target.text).equal(source.text, 'Текст комментария должнен соответствовать тексту в запросе');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"text\": \"{{$randomLoremParagraph}} comment EveryWhere\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{serverUrl}}/users/:userId/events/:eventId/comment",
							"host": [
								"{{serverUrl}}"
							],
							"path": [
								"users",
								":userId",
								"events",
								":eventId",
								"comment"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{rndUserId}}"
								},
								{
									"key": "eventId",
									"value": "{{rndEventId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Add comment4 by user2",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"userIds = pm.collectionVariables.get(\"userIds\")\r",
									"var rndUserId = userIds[1];\r",
									"pm.collectionVariables.set(\"rndUserId\", rndUserId)\r",
									"\r",
									"eventIds = pm.collectionVariables.get(\"eventIds\")\r",
									"var rndEventId = eventIds[0];\r",
									"pm.collectionVariables.set(\"rndEventId\", rndEventId)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(201);  \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const source = JSON.parse(pm.request.body.raw);\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Комментарий должнен содержать поля: id, text, author, event, createdOn, editedOn\", function () {\r",
									"pm.expect(target).to.have.property('id');\r",
									"pm.expect(target).to.have.property('text');\r",
									"pm.expect(target).to.have.property('author');\r",
									"pm.expect(target).to.have.property('event');\r",
									"pm.expect(target).to.have.property('createdOn');\r",
									"pm.expect(target).to.have.property('editedOn');\r",
									"});\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    pm.expect(target.id).to.not.be.null;\r",
									"    pm.expect(target.text).equal(source.text, 'Текст комментария должнен соответствовать тексту в запросе');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"text\": \"{{$randomLoremParagraph}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{serverUrl}}/users/:userId/events/:eventId/comment",
							"host": [
								"{{serverUrl}}"
							],
							"path": [
								"users",
								":userId",
								"events",
								":eventId",
								"comment"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{rndUserId}}"
								},
								{
									"key": "eventId",
									"value": "{{rndEventId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update comment1",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"userIds = pm.collectionVariables.get(\"userIds\")\r",
									"var rndUserId = userIds[0];\r",
									"pm.collectionVariables.set(\"rndUserId\", rndUserId)\r",
									"\r",
									"eventIds = pm.collectionVariables.get(\"eventIds\")\r",
									"var rndEventId = eventIds[0];\r",
									"pm.collectionVariables.set(\"rndEventId\", rndEventId)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(200);  \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const source = JSON.parse(pm.request.body.raw);\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Комментарий должнен содержать поля: id, text, author, event, createdOn, editedOn\", function () {\r",
									"pm.expect(target).to.have.property('id');\r",
									"pm.expect(target).to.have.property('text');\r",
									"pm.expect(target).to.have.property('author');\r",
									"pm.expect(target).to.have.property('event');\r",
									"pm.expect(target).to.have.property('createdOn');\r",
									"pm.expect(target).to.have.property('editedOn');\r",
									"});\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    pm.expect(target.id).to.not.be.null;\r",
									"    pm.expect(target.text).equal(source.text, 'Текст комментария должнен соответствовать тексту в запросе');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"text\": \"Patch comment1\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{serverUrl}}/users/:userId/events/:eventId/comment/:commentId",
							"host": [
								"{{serverUrl}}"
							],
							"path": [
								"users",
								":userId",
								"events",
								":eventId",
								"comment",
								":commentId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{rndUserId}}"
								},
								{
									"key": "eventId",
									"value": "{{rndEventId}}"
								},
								{
									"key": "commentId",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update comment1 with whitespaces",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"userIds = pm.collectionVariables.get(\"userIds\")\r",
									"var rndUserId = userIds[0];\r",
									"pm.collectionVariables.set(\"rndUserId\", rndUserId)\r",
									"\r",
									"eventIds = pm.collectionVariables.get(\"eventIds\")\r",
									"var rndEventId = eventIds[0];\r",
									"pm.collectionVariables.set(\"rndEventId\", rndEventId)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(400);  \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"text\": \"         \"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{serverUrl}}/users/:userId/events/:eventId/comment/:commentId",
							"host": [
								"{{serverUrl}}"
							],
							"path": [
								"users",
								":userId",
								"events",
								":eventId",
								"comment",
								":commentId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{rndUserId}}"
								},
								{
									"key": "eventId",
									"value": "{{rndEventId}}"
								},
								{
									"key": "commentId",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "(Private) Get comment1 by id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"userIds = pm.collectionVariables.get(\"userIds\")\r",
									"var rndUserId = userIds[0];\r",
									"pm.collectionVariables.set(\"rndUserId\", rndUserId)\r",
									"\r",
									"eventIds = pm.collectionVariables.get(\"eventIds\")\r",
									"var rndEventId = eventIds[0];\r",
									"pm.collectionVariables.set(\"rndEventId\", rndEventId)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(200);  \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"userId =  Number(pm.request.url.path[1])\r",
									"commentId =  Number(pm.request.url.path[3])\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Комментарий должнен содержать поля: id, text, author, event, createdOn, editedOn\", function () {\r",
									"pm.expect(target).to.have.property('id');\r",
									"pm.expect(target).to.have.property('text');\r",
									"pm.expect(target).to.have.property('author');\r",
									"pm.expect(target).to.have.property('event');\r",
									"pm.expect(target).to.have.property('createdOn');\r",
									"pm.expect(target).to.have.property('editedOn');\r",
									"});\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    pm.expect(target.id).to.not.be.null;\r",
									"    pm.expect(target.id).equal(commentId, 'Id комментария должнен соответствовать id в запросе');\r",
									"    pm.expect(target.author.id).equal(userId, 'Id автора комментария должнен соответствовать id автора в запросе');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{serverUrl}}/users/:userId/comment/:commentId",
							"host": [
								"{{serverUrl}}"
							],
							"path": [
								"users",
								":userId",
								"comment",
								":commentId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{rndUserId}}"
								},
								{
									"key": "commentId",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "(Private) Get all comments of user1",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"userIds = pm.collectionVariables.get(\"userIds\")\r",
									"var rndUserId = userIds[0];\r",
									"pm.collectionVariables.set(\"rndUserId\", rndUserId)\r",
									"\r",
									"eventIds = pm.collectionVariables.get(\"eventIds\")\r",
									"var rndEventId = eventIds[0];\r",
									"pm.collectionVariables.set(\"rndEventId\", rndEventId)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(200);  \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"userId =  Number(pm.request.url.path[1])\r",
									"const target = pm.response.json()[0];\r",
									"const target_full = pm.response.json();\r",
									"\r",
									"pm.test(\"Комментарий должнен содержать поля: id, text, author, event, createdOn, editedOn\", function () {\r",
									"pm.expect(target).to.have.property('id');\r",
									"pm.expect(target).to.have.property('text');\r",
									"pm.expect(target).to.have.property('author');\r",
									"pm.expect(target).to.have.property('event');\r",
									"pm.expect(target).to.have.property('createdOn');\r",
									"pm.expect(target).to.have.property('editedOn');\r",
									"});\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    for (let i = 0; i < target_full.length; i++) {\r",
									"    pm.expect(target_full[i].id).to.not.be.null;\r",
									"    pm.expect(target_full[i].author.id).equal(userId, 'Id автора комментария должнен соответствовать id автора в запросе');\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{serverUrl}}/users/:userId/comment",
							"host": [
								"{{serverUrl}}"
							],
							"path": [
								"users",
								":userId",
								"comment"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{rndUserId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "(Public) Get comment1 by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(200);  \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"commentId =  Number(pm.request.url.path[1])\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Комментарий должнен содержать поля: id, text, author, event, createdOn, editedOn\", function () {\r",
									"pm.expect(target).to.have.property('id');\r",
									"pm.expect(target).to.have.property('text');\r",
									"pm.expect(target).to.have.property('author');\r",
									"pm.expect(target).to.have.property('event');\r",
									"pm.expect(target).to.have.property('createdOn');\r",
									"pm.expect(target).to.have.property('editedOn');\r",
									"});\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    pm.expect(target.id).to.not.be.null;\r",
									"    pm.expect(target.id).equal(commentId, 'Id комментария должнен соответствовать id в запросе');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{serverUrl}}/comments/:comentId",
							"host": [
								"{{serverUrl}}"
							],
							"path": [
								"comments",
								":comentId"
							],
							"variable": [
								{
									"key": "comentId",
									"value": "3"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "(Public) Get all comments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(200);  \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Комментарий должнен содержать поля: id, text, author, event, createdOn, editedOn\", function () {\r",
									"    for (let i = 0; i < target.length; i++) {\r",
									"        pm.expect(target[i]).to.have.property('id');\r",
									"        pm.expect(target[i]).to.have.property('text');\r",
									"        pm.expect(target[i]).to.have.property('author');\r",
									"        pm.expect(target[i]).to.have.property('event');\r",
									"        pm.expect(target[i]).to.have.property('createdOn');\r",
									"        pm.expect(target[i]).to.have.property('editedOn');\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{serverUrl}}/comments",
							"host": [
								"{{serverUrl}}"
							],
							"path": [
								"comments"
							]
						}
					},
					"response": []
				},
				{
					"name": "(Public) Get all comments of user1",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"userIds = pm.collectionVariables.get(\"userIds\")\r",
									"var rndUserId = userIds[0];\r",
									"pm.collectionVariables.set(\"rndUserId\", rndUserId)\r",
									"\r",
									"eventIds = pm.collectionVariables.get(\"eventIds\")\r",
									"var rndEventId = eventIds[0];\r",
									"pm.collectionVariables.set(\"rndEventId\", rndEventId)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(200);  \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"\r",
									"var query = {};\r",
									"pm.request.url.query.all().forEach((param) => { query[param.key] = param.value});\r",
									"userId =  Number(query[\"authors\"])\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Комментарий должнен содержать поля: id, text, author, event, createdOn, editedOn\", function () {\r",
									"    for (let i = 0; i < target.length; i++) {\r",
									"        pm.expect(target[i]).to.have.property('id');\r",
									"        pm.expect(target[i]).to.have.property('text');\r",
									"        pm.expect(target[i]).to.have.property('author');\r",
									"        pm.expect(target[i]).to.have.property('event');\r",
									"        pm.expect(target[i]).to.have.property('createdOn');\r",
									"        pm.expect(target[i]).to.have.property('editedOn');\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    for (let i = 0; i < target.length; i++) {\r",
									"    pm.expect(target[i].id).to.not.be.null;\r",
									"    pm.expect(target[i].author.id).equal(userId, 'Id автора комментария должнен соответствовать id автора в запросе');\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{serverUrl}}/comments?authors={{rndUserId}}&sort=EVENTS",
							"host": [
								"{{serverUrl}}"
							],
							"path": [
								"comments"
							],
							"query": [
								{
									"key": "authors",
									"value": "{{rndUserId}}"
								},
								{
									"key": "sort",
									"value": "EVENTS"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "(Public) Get all comments with text \"comment\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(200);  \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"var query = {};\r",
									"pm.request.url.query.all().forEach((param) => { query[param.key] = param.value});\r",
									"text =  query[\"text\"]\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Комментарий должнен содержать поля: id, text, author, event, createdOn, editedOn\", function () {\r",
									"    for (let i = 0; i < target.length; i++) {\r",
									"        pm.expect(target[i]).to.have.property('id');\r",
									"        pm.expect(target[i]).to.have.property('text');\r",
									"        pm.expect(target[i]).to.have.property('author');\r",
									"        pm.expect(target[i]).to.have.property('event');\r",
									"        pm.expect(target[i]).to.have.property('createdOn');\r",
									"        pm.expect(target[i]).to.have.property('editedOn');\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    for (let i = 0; i < target.length; i++) {\r",
									"    pm.expect(target[i].id).to.not.be.null;\r",
									"    pm.expect(target[i].text.toLowerCase()).includes(text, 'Текст должен содержать искомую строку');\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{serverUrl}}/comments?text=comment",
							"host": [
								"{{serverUrl}}"
							],
							"path": [
								"comments"
							],
							"query": [
								{
									"key": "text",
									"value": "comment"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete comment2 by user1",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"userIds = pm.collectionVariables.get(\"userIds\")\r",
									"var rndUserId = userIds[0];\r",
									"pm.collectionVariables.set(\"rndUserId\", rndUserId)\r",
									"\r",
									"eventIds = pm.collectionVariables.get(\"eventIds\")\r",
									"var rndEventId = eventIds[0];\r",
									"pm.collectionVariables.set(\"rndEventId\", rndEventId)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{serverUrl}}/users/:userId/events/:eventId/comment/:commentId",
							"host": [
								"{{serverUrl}}"
							],
							"path": [
								"users",
								":userId",
								"events",
								":eventId",
								"comment",
								":commentId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{rndUserId}}"
								},
								{
									"key": "eventId",
									"value": "{{rndEventId}}"
								},
								{
									"key": "commentId",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete comment4 by user1",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"userIds = pm.collectionVariables.get(\"userIds\")\r",
									"var rndUserId = userIds[0];\r",
									"pm.collectionVariables.set(\"rndUserId\", rndUserId)\r",
									"\r",
									"eventIds = pm.collectionVariables.get(\"eventIds\")\r",
									"var rndEventId = eventIds[0];\r",
									"pm.collectionVariables.set(\"rndEventId\", rndEventId)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 409 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(409);  \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{serverUrl}}/users/:userId/events/:eventId/comment/:commentId",
							"host": [
								"{{serverUrl}}"
							],
							"path": [
								"users",
								":userId",
								"events",
								":eventId",
								"comment",
								":commentId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{rndUserId}}"
								},
								{
									"key": "eventId",
									"value": "{{rndEventId}}"
								},
								{
									"key": "commentId",
									"value": "4"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete comment4 by admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{serverUrl}}/admin/comment/:commentId",
							"host": [
								"{{serverUrl}}"
							],
							"path": [
								"admin",
								"comment",
								":commentId"
							],
							"variable": [
								{
									"key": "commentId",
									"value": "4"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete deleted comment4 by admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(404);  \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{serverUrl}}/admin/comment/:commentId",
							"host": [
								"{{serverUrl}}"
							],
							"path": [
								"admin",
								"comment",
								":commentId"
							],
							"variable": [
								{
									"key": "commentId",
									"value": "4"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"API = class {",
					"    constructor(postman, verbose = false, baseUrl = \"http://localhost:8080\") {",
					"        this.baseUrl = baseUrl;",
					"        this.pm = postman;",
					"        this._verbose = verbose;",
					"    }",
					"",
					"    async addUser(user, verbose=null) {",
					"        return this.post(\"/admin/users\", user, \"Ошибка при добавлении нового пользователя: \", verbose);",
					"    }",
					"",
					"    async addCategory(category, verbose=null) {",
					"        return this.post(\"/admin/categories\", category, \"Ошибка при добавлении новой категории: \", verbose);",
					"    }",
					"",
					"    async addEvent(userId, event, verbose=null) {",
					"        return this.post(\"/users/\" + userId + \"/events\", event, \"Ошибка при добавлении нового события: \", verbose);",
					"    }",
					"",
					"    async addCompilation(compilation, verbose=null) {",
					"        return this.post(\"/admin/compilations\", compilation, \"Ошибка при добавлении новой подборки: \", verbose);",
					"    }",
					"",
					"    async publishParticipationRequest(eventId, userId, verbose=null) {",
					"        return this.post('/users/' + userId + '/requests?eventId=' + eventId, null, \"Ошибка при добавлении нового запроса на участие в событии\", verbose);",
					"    }",
					"",
					"    async publishEvent(eventId, verbose=null) {",
					"        return this.patch('/admin/events/' + eventId, {stateAction: \"PUBLISH_EVENT\"}, \"Ошибка при публикации события\", verbose);",
					"    }",
					"    ",
					"    async rejectEvent(eventId, verbose=null) {",
					"        return this.patch('/admin/events/' + eventId, {stateAction: \"REJECT_EVENT\"}, \"Ошибка при отмене события\", verbose);",
					"    }",
					"",
					"    async acceptParticipationRequest(eventId, userId, reqId, verbose=null) {",
					"        return this.patch('/users/' + userId + '/events/' + eventId + '/requests/', {requestIds:[reqId], status: \"CONFIRMED\"}, \"Ошибка при принятии заявки на участие в событии\", verbose);",
					"    }",
					"",
					"    async findCategory(catId, verbose=null) {",
					"        return this.get('/categories/' + catId, null, \"Ошибка при поиске категории по id\", verbose);",
					"    }",
					"",
					"    async findCompilation(compId, verbose=null) {",
					"        return this.get('/compilations/' + compId, null, \"Ошибка при поиске подборки по id\", verbose);",
					"    }",
					"",
					"    async findUser(userId, verbose=null) {",
					"        return this.get('/admin/users?ids=' + userId, null, \"Ошибка при поиске пользователя по id\", verbose);",
					"    }",
					"",
					"    async post(path, body, errorText = \"Ошибка при выполнении post-запроса: \", verbose=null) {",
					"        return this.sendRequest(\"POST\", path, body, errorText, verbose);",
					"    }",
					"",
					"    async patch(path, body = null, errorText = \"Ошибка при выполнении patch-запроса: \", verbose=null) {",
					"        return this.sendRequest(\"PATCH\", path, body, errorText, verbose);",
					"    }",
					"",
					"    async get(path, body = null, errorText = \"Ошибка при выполнении get-запроса: \", verbose=null) {",
					"        return this.sendRequest(\"GET\", path, body, errorText, verbose);",
					"    }",
					"",
					"    async sendRequest(method, path, body=null, errorText = \"Ошибка при выполнении запроса: \", verbose=null) {",
					"        return new Promise((resolve, reject) => {",
					"            verbose = verbose == null ? this._verbose : verbose;",
					"",
					"            const request = {",
					"                url: this.baseUrl + path,",
					"                method: method,",
					"                body: body == null ? \"\" : JSON.stringify(body),",
					"                header: { \"Content-Type\": \"application/json\" },",
					"            };",
					"",
					"            if(verbose) {",
					"                console.log(\"Отправляю запрос: \", request);",
					"            }",
					"",
					"            try {",
					"                this.pm.sendRequest(request, (error, response) => {",
					"                    if(error || (response.code >= 400 && response.code <= 599)) {",
					"                        let err = error ? error : JSON.stringify(response.json());",
					"                        console.error(\"При выполнении запроса к серверу возникла ошика.\\n\", err,",
					"                             \"\\nДля отладки проблемы повторите такой же запрос к вашей программе \" + ",
					"                             \"на локальном компьютере. Данные запроса:\\n\", JSON.stringify(request));",
					"",
					"                        reject(new Error(errorText + err));",
					"                    }",
					"",
					"                    if(verbose) {",
					"                        console.log(\"Результат обработки запроса: код состояния - \", response.code, \", тело: \", response.json());",
					"                    }",
					"",
					"                    resolve(response.json());",
					"                });",
					"            } catch(err) {",
					"                if(verbose) {",
					"                    console.error(errorText, err);",
					"                }",
					"                return Promise.reject(err);",
					"            }",
					"        });",
					"    }",
					"};",
					"",
					"RandomUtils = class {",
					"    constructor() {}",
					"",
					"    getUser() {",
					"        return {",
					"            name: pm.variables.replaceIn('{{$randomFullName}}'),",
					"            email: pm.variables.replaceIn('{{$randomEmail}}')",
					"        };",
					"    }",
					"",
					"    getCategory() {",
					"        return {",
					"            name: pm.variables.replaceIn('{{$randomWord}}') + Math.floor(Math.random() * 100).toString()",
					"        };",
					"    }",
					"",
					"    getEvent(categoryId) {",
					"        return {",
					"            annotation: pm.variables.replaceIn('{{$randomLoremParagraph}}'),",
					"            category: categoryId,",
					"            description: pm.variables.replaceIn('{{$randomLoremParagraphs}}'),",
					"            eventDate: this.getFutureDateTime(),",
					"            location: {",
					"                lat: parseFloat(pm.variables.replaceIn('{{$randomLatitude}}')),",
					"                lon: parseFloat(pm.variables.replaceIn('{{$randomLongitude}}')),",
					"            },",
					"            paid: pm.variables.replaceIn('{{$randomBoolean}}'),",
					"            participantLimit: pm.variables.replaceIn('{{$randomInt}}'),",
					"            requestModeration: pm.variables.replaceIn('{{$randomBoolean}}'),",
					"            title: pm.variables.replaceIn('{{$randomLoremSentence}}'),",
					"        }",
					"    }",
					"",
					"    getCompilation(...eventIds) {",
					"        return {",
					"            title: pm.variables.replaceIn('{{$randomLoremSentence}}'),",
					"            pinned: pm.variables.replaceIn('{{$randomBoolean}}'),",
					"            events: eventIds",
					"        };",
					"    }",
					"",
					"    getFutureDateTime(hourShift = 5, minuteShift=0, yearShift=0) {",
					"        let moment = require('moment');",
					"",
					"        let m = moment();",
					"        m.add(hourShift, 'hour');",
					"        m.add(minuteShift, 'minute');",
					"        m.add(yearShift, 'year');",
					"",
					"        return m.format('YYYY-MM-DD HH:mm:ss');",
					"    }",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "serverUrl",
			"value": "http://localhost:8080",
			"type": "default"
		},
		{
			"key": "rndUserName",
			"value": ""
		},
		{
			"key": "rndUserEmail",
			"value": ""
		},
		{
			"key": "userIds",
			"value": ""
		},
		{
			"key": "rndCategoryName",
			"value": ""
		},
		{
			"key": "catIds",
			"value": ""
		},
		{
			"key": "rndFutureDateTime",
			"value": ""
		},
		{
			"key": "rndUserId",
			"value": ""
		},
		{
			"key": "rndCatId",
			"value": ""
		},
		{
			"key": "eventIds",
			"value": ""
		},
		{
			"key": "rndEventId",
			"value": ""
		}
	]
}